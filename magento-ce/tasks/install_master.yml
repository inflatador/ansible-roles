---
- name: Install list of packages
  apt: name={{item}} state=installed
  with_items:
       - php-gd
       - php-dom
       - php-mcrypt
       - php-curl
       - php-intl
       - php-mbstring
       - php-zip

- name: Set repo.magento.com composer keys
  shell: 'composer config --global http-basic.repo.magento.com  b2f5cba61c010a8eb9e563dc7f031db2 842ab5320d751c878cdc488f3e5ddf6a' 

- name: download magento with composer
  shell: 'composer create-project --repository=https://repo.magento.com/ magento/project-community-edition {{ magento_document_root }}'
  environment:
    HOME: "/root"

- name: Run Magento Installer
  command: 'php bin/magento setup:install --language="en_US" --timezone="{{ tz }}" --db-host={{ mysql_host_ipi }} --db-name={{ magento_db_name }} --db-user={{ magento_db_user }} --db-password={{ magento_db_password }} --base-url=http://{{ magento_vhost_domain }}  --use_rewrites="1"  --admin-firstname={{ magento_admin_fname }} --admin-lastname={{ magento_admin_lname }} --admin-email={{ magento_admin_email }} --admin-username={{ magento_admin_user }} --admin-password={{ magento_admin_pass }} --currency=USD'
  args:
    chdir: "{{ magento_document_root }}"

- name: Configure File Level Permissions
  command: 'find . -type f -exec chmod 644 {} ";"'
  args:
    chdir: '{{ magento_document_root }}'
  register: file_perm_change
  changed_when: file_perm_change.stdout

- name: Configure Directory Level Permissions
  command: 'find . -type d -exec chmod 755 {} ";"'
  args:
    chdir: '{{ magento_document_root }}'
  register: file_perm_change
  changed_when: file_perm_change.stdout

- name: Configure File and Directory Ownership
  command: 'chown -R {{ magento_sftp_user }}:{{ nginx_vhost_user }} {{ magento_document_root }}'
  args:
    chdir: '{{ magento_document_root }}'
  register: file_perm_change
  changed_when: file_perm_change.stdout

- name: Create Cron Job
  cron:
    name: "Magento Cron Script"
    user: '{{ magento_sftp_user }}'
    minute: "*/5"
    job: '/bin/sh {{ magento_document_root }}/cron.sh >/dev/null 2>&1'
    state: present

- name: Enable Cm_RedisSession
  template:
    src: 'Common/Cm_RedisSession.xml.j2'
    dest: '{{ magento_document_root }}/app/etc/modules/Cm_RedisSession.xml'
    owner: '{{ magento_sftp_user }}'
    group: '{{ nginx_vhost_user }}'

- name: Add comment regarding "cache.xml" to local.xml
  lineinfile:
    dest: '{{ magento_document_root }}/app/etc/local.xml'
    line: '<!-- sessions and cache are in Redis. See ./cache.xml for config -->'
    insertafter: 'session_save'
    state: present

- name: Remove "session_save" from local.xml
  lineinfile:
    dest: '{{ magento_document_root }}/app/etc/local.xml'
    regexp: 'session_save'
    state: absent

- name: Create cache.xml
  template:
    src: 'Common/cache.xml.j2'
    dest: '{{ magento_document_root }}/app/etc/cache.xml'
    owner: '{{ magento_sftp_user }}'
    group: '{{ nginx_vhost_user }}'

- name: Create backup cache.xml
  template:
    src: 'Common/cache.xml.j2'
    dest: '{{ magento_sftp_user_home }}/cache.xml'
    owner: 'root'
    group: 'root'
    mode: 0644

- name: Create remote_addr_headers.xml
  template:
    src: 'Common/remote_addr_headers.xml.j2'
    dest: '{{ magento_document_root }}/app/etc/remote_addr_headers.xml'
    owner: '{{ magento_sftp_user }}'
    group: '{{ nginx_vhost_user }}'

- name: Enable Redis
  blockinfile:
    path: "{{ magento_document_root }}/app/etc/local.xml"
    insertafter: "</resources>"
    block: |2
              <cache>
          <backend>Mage_Cache_Backend_Redis</backend>
          <backend_options>
            <server>127.0.0.1</server>              <!-- or absolute path to unix socket -->
            <port>6379</port>
            <persistent></persistent>               <!-- Specify a unique string like "cache-db0" to enable persistent connections. -->
            <database>0</database>
            <password></password>
            <force_standalone>0</force_standalone>  <!-- 0 for phpredis, 1 for standalone PHP -->
            <connect_retries>1</connect_retries>    <!-- Reduces errors due to random connection failures -->
            <read_timeout>10</read_timeout>         <!-- Set read timeout duration -->
            <automatic_cleaning_factor>0</automatic_cleaning_factor> <!-- Disabled by default -->
            <compress_data>1</compress_data>        <!-- 0-9 for compression level, recommended: 0 or 1 -->
            <compress_tags>1</compress_tags>        <!-- 0-9 for compression level, recommended: 0 or 1 -->
            <compress_threshold>20480</compress_threshold>  <!-- Strings below this size will not be compressed -->
            <compression_lib>gzip</compression_lib> <!-- Supports gzip, lzf and snappy -->
          </backend_options>
        </cache>

- name: Start Redis
  service:
    name: redis-server
    state: started
